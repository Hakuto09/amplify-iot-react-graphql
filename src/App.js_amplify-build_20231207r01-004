import React, { useState, useEffect } from "react";

// Hakuto start
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import { Line } from "react-chartjs-2";
// Hakuto end

import "./App.css";
import "@aws-amplify/ui-react/styles.css";
//import { API } from "aws-amplify";
import { generateClient } from "aws-amplify/api";
import {
  Button,
  Flex,
  Heading,
  Text,
  TextField,
  View,
  withAuthenticator,
} from "@aws-amplify/ui-react";
import { listNotes } from "./graphql/queries";
import {
  createNote as createNoteMutation,
  deleteNote as deleteNoteMutation,
} from "./graphql/mutations";

// Hakuto start
//import { Amplify, Logger, AWSCloudWatchProvider} from 'aws-amplify'
import { Amplify, AWSCloudWatchProvider} from 'aws-amplify'
import { ConsoleLogger } from 'aws-amplify/utils';

//import { Authenticator } from '@aws-amplify/ui-react'

import awsExports from './aws-exports'

const loggerPrefix = 'amplify-logger'
const appName = 'amplify-iot-react-graphql'
const username = 'amplify-user' //実際に利用するときは、未認証ユーザーにはUUID、認証済みユーザーにはusernameなどの識別子を入れてログを取ると良さそう

Amplify.configure({
  Logging: {
    logGroupName: `/${loggerPrefix}/${appName}/${process.env.NODE_ENV}`,
    logStreamName: username,
  },
  ...awsExports,
})

const LOG_LEVEL = 'INFO' //どのレベルのログまでロギングするか

//const logger = new Logger('TestLogger', LOG_LEVEL)
//Amplify.register(logger)
//logger.addPluggable(new AWSCloudWatchProvider())

const console_logger = new ConsoleLogger('foo');
// Hakuto end

const client = generateClient();

const App = ({ signOut }) => {
  const [notes, setNotes] = useState([]);

  useEffect(() => {
    fetchNotes();
  }, []);

  async function fetchNotes() {
//    const apiData = await API.graphql({ query: listNotes });
    const apiData = await client.graphql({ query: listNotes });
    const notesFromAPI = apiData.data.listNotes.items;
    setNotes(notesFromAPI);
  }

  async function createNote(event) {
    event.preventDefault();
    const form = new FormData(event.target);
    const data = {
      nickname: form.get("nickname"),
      date: form.get("date"),
      send_cnt: form.get("send_cnt"),
      magx: form.get("magx"),
      magy: form.get("magy"),
      magz: form.get("magz"),
      degree: form.get("degree"),
      distance: form.get("distance"),
      pres: form.get("pres"),
      temp: form.get("temp"),
      humi: form.get("humi"),
    };
//    await API.graphql({
    await client.graphql({
      query: createNoteMutation,
      variables: { input: data },
    });
    fetchNotes();
    event.target.reset();
  }

  async function deleteNote({ id }) {
    const newNotes = notes.filter((note) => note.id !== id);
    setNotes(newNotes);
//    await API.graphql({
    await client.graphql({
      query: deleteNoteMutation,
      variables: { input: { id } },
    });
  }

  // Hakuto start
  //logger.error(username, 'test error')
  console_logger.error('test error')
  //logger.warn(username, 'test warn')
  console_logger.warn('test warn')
  //logger.info(username, 'test info')
  console_logger.info('test info')
  //logger.debug(username, 'test debug')
  console_logger.debug('test debug')

  ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend
  );
  
//  const Graph: React.FC = () => {
    const options = {
      responsive: true,
      plugins: {
        title: {
          display: true,
          text: "グラフタイトル",
        },
      },
    };
  
    const labels = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
    ];
  
    const data = {
      labels,
      datasets: [
        {
          label: "データ1",
          data: [10, 40, 30, 40, 50, 80, 120],
          borderColor: "rgb(255, 99, 132)",
          backgroundColor: "rgba(255, 99, 132, 0.5)",
        },
      ],
    };
  // Hakuto end

  // Hakuto about "Line"
  return (
    <View className="App">
      <Line options={options} data={data} />
    
      <Heading level={1}>My Notes App</Heading>
      <View as="form" margin="3rem 0" onSubmit={createNote}>
        <Flex direction="row" justifyContent="center">
          <TextField
            name="nickname"
            placeholder="Note NickName"
            label="Note NickName"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="date"
            placeholder="Note Date"
            label="Note Date"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="send_cnt"
            placeholder="send_cnt"
            label="send_cnt"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="magx"
            placeholder="magx"
            label="magx"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="magy"
            placeholder="magy"
            label="magy"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="magz"
            placeholder="magz"
            label="magz"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="degree"
            placeholder="degree"
            label="degree"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="distance"
            placeholder="distance"
            label="distance"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="pres"
            placeholder="pres"
            label="pres"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="temp"
            placeholder="temp"
            label="temp"
            labelHidden
            variation="quiet"
            required
          />
          <TextField
            name="humi"
            placeholder="humi"
            label="humi"
            labelHidden
            variation="quiet"
            required
          />
          <Button type="submit" variation="primary">
            Create Note
          </Button>
        </Flex>
      </View>
      <Heading level={2}>Current Notes</Heading>
      <View margin="3rem 0">
        {notes.map((note) => (
          <Flex
//            key={note.id || note.name}
            key={!!note.id}
            direction="row"
            justifyContent="center"
            alignItems="center"
          >
            <Text as="strong" fontWeight={700}>
              {note.nickname}
            </Text>
            <Text as="span">{note.date}</Text>
            <Text as="span">{note.send_cnt}</Text>
            <Text as="span">{note.magx}</Text>
            <Text as="span">{note.magy}</Text>
            <Text as="span">{note.magz}</Text>
            <Text as="span">{note.degree}</Text>
            <Text as="span">{note.distance}</Text>
            <Text as="span">{note.pres}</Text>
            <Text as="span">{note.temp}</Text>
            <Text as="span">{note.humi}</Text>
            <Button variation="link" onClick={() => deleteNote(note)}>
              Delete note
            </Button>
          </Flex>
        ))}
      </View>
      <Button onClick={signOut}>Sign Out</Button>
    </View>
  );
};

export default withAuthenticator(App);